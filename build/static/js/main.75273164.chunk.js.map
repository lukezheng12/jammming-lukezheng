{"version":3,"sources":["Components/util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["expireIn","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","search","bind","assertThisInitialized","handleTermChange","onSearch","e","target","value","setState","react_default","a","createElement","className","onChange","placeholder","onClick","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","addOrRemove","renderAction","name","artist","album","TrackList","tracks","map","key","id","Components_Track_Track","SearchResults","Components_TrackList_TrackList","searchResults","Playlist","handleNameChange","onNameChange","playlist","onSave","accessToken","Spotify","getAccessToken","accessToken1","window","location","href","match","setTimeout","history","pushState","getUserId","nameIn","uri","myHeader","Authorization","concat","fetch","headers","then","response","ok","json","Error","networkError","console","log","message","jsonResponse","createNewPlaylist","resUserId","_this2","urlToFetch","Content-Type","myBody","description","public","method","body","JSON","stringify","addTracksToPlaylist","resPlaylist","uris","savePlaylist","playlistNameIn","tracksUris","items","artists","App","playlistName","playlistTracks","updatePlaylistName","find","savedTrack","newList","push","trackToBeRemoved","filter","trackURIs","playlistIn","Components_SearchBar_SearchBar","Components_SearchResults_SearchResults","Components_Playlist_Playlist","Boolean","hostname","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75273164.chunk.js","sourcesContent":["// Luke Zheng\n// lqz.fsu@gmail.com\n// January, 2019\n// The Jammming Project\n// Purpose: Build API interface with Spotify.com, search songs,\n//          make playlists, and save playlists to Spotify account.\n// As Part of \"Build Front-End Web Applications from Scratch\" Course \n// at Codecademy\n//\nlet accessToken = '';\nconst clientId = 'bf36988ddfb54a0b9795ff8d5df0cad9';\nconst redirectUri = 'http://jammming-lukez.surge.sh'\nlet expireIn;\n\n// Module for Spotify API\nconst Spotify = {\n\n  // Get access token\n  getAccessToken(){\n\n    const accessToken1 = window.location.href.match(/access_token=([^&]*)/);\n    if(accessToken1) {\n      accessToken = accessToken1[1];\n    } else {\n      window.location=\"https://accounts.spotify.com/authorize?client_id=\"+clientId+\"&response_type=token&scope=playlist-modify-private&redirect_uri=\"+redirectUri;\n\n\n      accessToken = window.location.href.match(/access_token=([^&]*)/)[1];\n      expireIn = window.location.href.match(/expires_in=([^&]*)/)[1];\n      window.setTimeout(() => accessToken = '', expireIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n    }\n  },\n\n  // Get user ID\n  getUserId(nameIn, uri){\n  \n    const myHeader = {Authorization: `Bearer ${accessToken}`}\n    const urlToFetch = 'https://api.spotify.com/v1/me';\n    const resUserId = fetch(urlToFetch,\n      {\n        headers: myHeader\n      }\n    ).then (response => {\n      if(response.ok) {\n        return response.json();\n      }\n      throw new Error('Request failed!');\n\n    }, networkError => console.log(networkError.message)\n    ).then(jsonResponse => {\n      this.createNewPlaylist(jsonResponse, nameIn, uri);\n      return jsonResponse;\n    });\n\n  },\n\n  // Create a new playlist\n  createNewPlaylist(resUserId, nameIn, uri){\n    const urlToFetch = `https://api.spotify.com/v1/users/${resUserId.id}/playlists`;\n    const myHeader = {Authorization: `Bearer ${accessToken}`,\n                      'Content-Type': 'application/json'};\n    const myBody = {\n         name: nameIn,\n         description: \"List from Jammming\",\n         public: false\n       };\n\n    const resPlaylist = fetch(urlToFetch,\n      {headers: myHeader,\n       method: 'POST',\n       body: JSON.stringify(myBody)\n      }\n     ).then(response => {return response.json();})\n     .then(jsonResponse => {\n      this.addTracksToPlaylist(jsonResponse, uri);\n      return jsonResponse.id;\n    });\n  },\n\n  // Add tracks to playlist\n  addTracksToPlaylist(resPlaylist, uri) {\n    const urlToFetch = `https://api.spotify.com/v1/playlists/${resPlaylist.id}/tracks`;\n    const myHeader = {Authorization: `Bearer ${accessToken}`,\n                      'Content-Type': 'application/json'};\n    const myBody = {\n         uris: uri\n       };\n    return fetch(urlToFetch,\n      {headers: myHeader,\n       method: 'POST',\n       body: JSON.stringify(myBody)\n      }\n     ).then(response => {return response.json();})\n     .then(jsonResponse => {\n      return jsonResponse;\n    });\n\n  },\n\n  // Save playlist to Spotify\n  savePlaylist(playlistNameIn, tracksUris){\n    if( !playlistNameIn || !tracksUris) return;\n\n    this.getUserId(playlistNameIn, tracksUris); \n\n    return;\n  },\n\n  // Search songs in Spotify\n  search(term){\n    this.getAccessToken();\n\n    const urlToFetch = \"https://api.spotify.com/v1/search?type=track&q=\"+term;\n\n    return fetch(urlToFetch,\n      {\n        headers: {Authorization: `Bearer ${accessToken}`}\n      }\n    ).then (response => {\n      if(response.ok) {\n        return response.json();\n      }\n      throw new Error('Request failed!');\n\n    }, networkError => console.log(networkError.message)\n    ).then(jsonResponse => {\n    if(jsonResponse.tracks) {\n      const tracks = jsonResponse.tracks.items;\n      return tracks.map(track => {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        };\n      });\n    }\n  });\n  }\n\n}\n\nexport default Spotify;\n","// Luke Zheng\n// lqz.fsu@gmail.com\n// January, 2019\n// The Jammming Project\n// Purpose: Build API interface with Spotify.com, search songs,\n//          make playlists, and save playlists to Spotify account.\n// As Part of \"Build Front-End Web Applications from Scratch\" Course \n// at Codecademy\n//\nimport React, { Component } from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {term: ''};\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n\n  // Perform search\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n\n  // Handle input term change\n  handleTermChange(e) {\n    const term = e.target.value;\n    this.setState({term: term});\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\n        <a onClick={this.search}>SEARCH</a>\n      </div>\n    )\n  }\n}\n\nexport default SearchBar;\n\n\n","// Luke Zheng\n// lqz.fsu@gmail.com\n// January, 2019\n// The Jammming Project\n// Purpose: Build API interface with Spotify.com, search songs,\n//          make playlists, and save playlists to Spotify account.\n// As Part of \"Build Front-End Web Applications from Scratch\" Course \n// at Codecademy\n//\nimport React, { Component } from 'react';\nimport './Track.css';\n\nclass Track extends Component {\n  constructor(props) {\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  // + for addable and - for removable\n  renderAction() {\n    return this.props.isRemoval ? \"-\" : \"+\";\n  }\n\n  // Add a track\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  }\n\n  // Remove a track\n  removeTrack(){\n    this.props.onRemove(this.props.track);\n  }\n\n  render() {\n    let addOrRemove;\n    if(this.props.isRemoval) {\n      addOrRemove = <a onClick={this.removeTrack} className=\"Track-action\"> {this.renderAction()}</a>;\n    } else {\n      addOrRemove = <a onClick={this.addTrack} className=\"Track-action\"> {this.renderAction()}</a>;\n    }\n\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} {this.props.track.album} </p>\n        </div>\n        {addOrRemove}\n      </div>\n    )\n  }\n}\n\nexport default Track;\n\n\n","// Luke Zheng\n// lqz.fsu@gmail.com\n// January, 2019\n// The Jammming Project\n// Purpose: Build API interface with Spotify.com, search songs,\n//          make playlists, and save playlists to Spotify account.\n// As Part of \"Build Front-End Web Applications from Scratch\" Course \n// at Codecademy\n//\nimport React, { Component } from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nclass TrackList extends Component {\n  render() {\n    const trackInfo = this.props.tracks.map((track) => {\n      return ( \n        <div key={track.id}  className=\"TrackList\">\n          <Track onRemove={this.props.onRemove} \n                 onAdd={this.props.onAdd} \n                 isRemoval={this.props.isRemoval} \n                 track={track} />\n        </div>\n      )});\n\n\n    return trackInfo;\n    \n  }\n}\n\nexport default TrackList;\n\n\n","// Luke Zheng\n// lqz.fsu@gmail.com\n// January, 2019\n// The Jammming Project\n// Purpose: Build API interface with Spotify.com, search songs,\n//          make playlists, and save playlists to Spotify account.\n// As Part of \"Build Front-End Web Applications from Scratch\" Course \n// at Codecademy\n//\nimport React, { Component } from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList onAdd={this.props.onAdd} isRemoval={false} tracks={this.props.searchResults} />\n      </div>\n    )\n  }\n}\n\nexport default SearchResults;\n\n","// Luke Zheng\n// lqz.fsu@gmail.com\n// January, 2019\n// The Jammming Project\n// Purpose: Build API interface with Spotify.com, search songs,\n//          make playlists, and save playlists to Spotify account.\n// As Part of \"Build Front-End Web Applications from Scratch\" Course \n// at Codecademy\n//\nimport React, { Component } from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends Component {\n  constructor(props) {\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n\n  // Handle playlist name change\n  handleNameChange(e) {\n    const name = e.target.value;\n    this.props.onNameChange(name);\n  }\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input onChange={this.handleNameChange} value={this.props.name}/>\n        <TrackList onRemove={this.props.onRemove} isRemoval={true}  tracks={this.props.playlist}/>\n        <a onClick={this.props.onSave} className=\"Playlist-save\">SAVE TO SPOTIFY</a>\n      </div>\n    )\n  }\n}\n\nexport default Playlist;\n\n","// Luke Zheng\n// lqz.fsu@gmail.com\n// January, 2019\n// The Jammming Project\n// Purpose: Build API interface with Spotify.com, search songs,\n//          make playlists, and save playlists to Spotify account.\n// As Part of \"Build Front-End Web Applications from Scratch\" Course \n// at Codecademy\n//\nimport React, { Component } from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../util/Spotify';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { searchResults: [],\n                   playlistName: \"New Playlist\",\n                   playlistTracks: []\n                 };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  // Add a track to the tracklist\n  addTrack(track) {\n    if(this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    const newList = this.state.playlistTracks;\n    newList.push(track);\n    this.setState({playlistTracks: newList});\n  }\n\n  // Remove a track from the tracklist\n  removeTrack(trackToBeRemoved) {\n    const newList = this.state.playlistTracks.filter(track => track.id !== trackToBeRemoved.id);\n    this.setState({playlistTracks: newList});\n\n  }\n\n  // Update the playlist name\n  updatePlaylistName(name){\n    this.setState({playlistName: name});\n  }\n\n  // Save playlist to Spotify\n  savePlaylist(){\n    const trackURIs = [];\n    this.state.playlistTracks.map(track => trackURIs.push(track.uri));\n    Spotify.savePlaylist(this.state.playlistName, trackURIs);\n    this.setState({playlistName: 'New Playlist',\n                   playlistTracks: []});\n  }\n\n  // Search songs in Spotify\n  search(term) {\n    Spotify.search(term).then(playlistIn => {\n      this.setState({searchResults: playlistIn});\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults onAdd={this.addTrack} searchResults={this.state.searchResults} />\n            <Playlist onSave={this.savePlaylist} \n                      name={this.state.playlistName} \n                      onNameChange={this.updatePlaylistName} \n                      onRemove={this.removeTrack} \n                      playlist={this.state.playlistTracks}/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}